#!/bin/bash
#
# Filename: debian-live-install
# Author: Olivier Sirol <czo@free.fr>
# License: GPL-2.0 (http://www.gnu.org/copyleft)
# File Created: f√©vr. 2021
# Last Modified: Sunday 25 December 2022, 19:11
# Edit Time: 45:00:51
# Description:
#
# $Id: debian-live-install,v 1.30 2022/12/23 07:35:21 czo Exp $
#

set -e -u

# to run on your host
#apt install debootstrap squashfs-tools xorriso isolinux syslinux-efi grub-pc-bin grub-efi-amd64-bin grub-efi-ia32-bin mtools dosfstools bash coreutils

SCRIPT_PATH=$(readlink -f ${0%/*})
export LIVE_BOOT=$SCRIPT_PATH/build
export LOG=$SCRIPT_PATH/build.log
export ISO_NAME="czo-rescue-deb-11.5.iso"
mkdir -p $LIVE_BOOT
rm -fr $LOG

(

##================================================================
run_once() {

    echo "<==== $LIVE_BOOT/build.$1 ======================"
    if [ ! -e $LIVE_BOOT/build.$1 ]; then
        $1
        touch $LIVE_BOOT/build.$1
    fi
}

##================================================================
make_01_prepare() {

echo "-> PREPARE ================================================="

# del old
rm -fr $LIVE_BOOT
mkdir -p $LIVE_BOOT

debootstrap --arch=amd64 --variant=minbase --merged-usr --components=main,contrib,non-free bullseye $LIVE_BOOT/chroot http://deb.debian.org/debian/

}

##================================================================
make_02_chroot() {

echo "-> CHROOT =================================================="

## test
# cp -f ~/.bashrc $LIVE_BOOT/chroot/root
# export LIVE_BOOT=/root/LIVE_CHROOT/build
# umount -lf $LIVE_BOOT/chroot/{run,dev/pts,dev,sys,proc} ; sleep 1 && rsync --delete -av $LIVE_BOOT/../s/ $LIVE_BOOT && for p in run dev sys proc; do mount --make-rslave --rbind /$p $LIVE_BOOT/chroot/$p ; done && chroot $LIVE_BOOT/chroot /bin/bash
# exit

mount --make-rslave --rbind /proc $LIVE_BOOT/chroot/proc
mount --make-rslave --rbind /sys  $LIVE_BOOT/chroot/sys
mount --make-rslave --rbind /dev  $LIVE_BOOT/chroot/dev
mount --make-rslave --rbind /run  $LIVE_BOOT/chroot/run


chroot $LIVE_BOOT/chroot /bin/bash <<'EOF'

#export LC_ALL=C.UTF-8
#export LC_ALL=en_US.UTF-8
#export LANG=C.UTF-8
#export LANG=C

export QUIET="-q -y"
export DEBIAN_FRONTEND=noninteractive
##export DEBIAN_PRIORITY=critical

echo $(date +%Y-%m-%d) > /etc/lsb-czo-installdate
echo $(date +%Y-%m-%d) > /etc/lsb-czo-updatedate

echo "czo-rescue-debian" > /etc/hostname
echo "czo-rescue-debian" > /etc/mailname

echo "--> apt update"
apt $QUIET update

echo "--> Update keyboard and console"
echo "LANG=en_US.UTF-8" > /etc/default/locale
apt $QUIET install console-setup keyboard-configuration locales
update-locale LANG=en_US.UTF-8
perl -i -pe 's,# en_US.UTF-8 UTF-8,en_US.UTF-8 UTF-8,' /etc/locale.gen
perl -i -pe 's,# fr_FR.UTF-8 UTF-8,fr_FR.UTF-8 UTF-8,' /etc/locale.gen
locale-gen

echo "--> tasksel + tasksel standard of debian 11"
apt $QUIET install tasksel mime-support file wget wamerican systemd-timesyncd ucf debian-faq fdisk telnet systemd isc-dhcp-common libpam-systemd doc-debian netcat-traditional apt-listchanges nftables media-types bzip2 pciutils lsof reportbug bind9-host cpio iproute2 vim-common less manpages apt-utils krb5-locales xz-utils ca-certificates ifupdown bind9-dnsutils readline-common systemd-sysv liblockfile-bin whiptail nano rsyslog man-db groff-base isc-dhcp-client debconf-i18n gettext-base ncurses-term procps traceroute sensible-utils bash-completion dbus iputils-ping vim-tiny kmod udev logrotate python3-reportbug openssh-client libnss-systemd init cron

echo "--> linux image and headers"
apt $QUIET install linux-image-amd64 linux-headers-amd64 live-boot

# TODO: verify
echo "--> czo's packages"
apt $QUIET install aptitude autofs bash bash-completion bc colordiff command-not-found cron cryptsetup curl cvs debconf-utils debootstrap dmraid dnsutils dosfstools efibootmgr ethtool exuberant-ctags firmware-iwlwifi firmware-linux-free firmware-misc-nonfree gdisk git gpart hashalot hexcurse htop iftop ioping iotop iperf iptraf isolinux jfsutils kpartx lftp libguestfs-tools libnet-xmpp-perl libpam-mount libqcow-utils libusb-dev lm-sensors lsb-release mc mlocate moreutils mtools nano ncdu network-manager nfs-client nmap p7zip-full parted perltidy rcs recode reiser4progs reiserfsprogs rsync screen squashfs-tools ssh strace sysstat tcpdump tidy tmate tmux tree tzdata vim wget wireless-tools xfsprogs xorriso zsh zsh-doc zstd gddrescue zfs-initramfs ttf-mscorefonts-installer rar net-tools xauth xsel xclip localepurge chntpw clonezilla dislocker ext4magic netcat hexedit iperf3 ipmitool lshw memtest86+ picocom mpg123 network-manager-openvpn network-manager-vpnc libnfs-utils openconnect paperkey par2 partclone qemu-guest-agent rdesktop socat squashfs-tools-ng stress


echo "--> microcode"
apt $QUIET install amd64-microcode intel-microcode

echo "--> syslinux grub"
apt $QUIET install syslinux-efi grub-efi-amd64-bin grub-efi-amd64-signed grub-efi-ia32-bin grub-pc-bin

echo "--> xorg xfce"
apt $QUIET install xfce4 xfce4-screenshooter xfce4-systemload-plugin xfce4-taskmanager xfce4-terminal xfce4-whiskermenu-plugin xfce4-xkb-plugin xterm lightdm-
# xserver-xorg-input-synaptics

echo "--> firefox gparted"
apt $QUIET install gparted vim-gtk xdotool gnome-themes-extra network-manager-gnome gsmartcontrol firefox-esr webext-ublock-origin-firefox xfburn ghex xarchiver remmina ristretto feh x11vnc galculator

# Configuration
sed -i 's/#\(Storage=\)auto/\1volatile/' /etc/systemd/journald.conf
sed -i 's/#\(Audit=\)yes/\1no/' /etc/systemd/journald.conf

sed -i 's/#\(HandleSuspendKey=\)suspend/\1ignore/' /etc/systemd/logind.conf
sed -i 's/#\(HandleHibernateKey=\)hibernate/\1ignore/' /etc/systemd/logind.conf
sed -i 's/#\(HandleLidSwitch=\)suspend/\1ignore/' /etc/systemd/logind.conf

# PulseAudio takes care of volume restore
ln -sf /dev/null /etc/udev/rules.d/90-alsa-restore.rules

# sshd
#in debian 7,8,9 ^Permit, in debian 10 ^#Permit
perl -i -pe 's,^#?PermitRootLogin.*,PermitRootLogin yes,' /etc/ssh/sshd_config
#arch linux
perl -i -pe 's,^#?X11Forwarding.*,X11Forwarding yes,' /etc/ssh/sshd_config
#systemctl restart sshd

# dpkg-reconfigure tzdata
#ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
ln -fs /usr/share/zoneinfo/Europe/Paris /etc/localtime
dpkg-reconfigure -f noninteractive tzdata

# dpkg-reconfigure locales
perl -i -pe 's,# en_US.UTF-8 UTF-8,en_US.UTF-8 UTF-8,' /etc/locale.gen
perl -i -pe 's,# fr_FR.UTF-8 UTF-8,fr_FR.UTF-8 UTF-8,' /etc/locale.gen
update-locale LANG=en_US.UTF-8
locale-gen

perl -i -pe 's,^#/net\s*-hosts.*,/net    -hosts,' /etc/auto.master
systemctl restart autofs

# cron czo-motd-czolsb
cat << 'OVER' > /etc/cron.d/czo-motd-czolsb
# Filename: czo-email-at-reboot
# 2022/05/21 : Modified by Olivier Sirol <czo@free.fr>

@reboot      root   /etc/czolsb > /etc/motd 2> /dev/null
OVER
chmod 644 /etc/cron.d/czo-motd-czolsb

cd /root
curl -fsSL https://raw.githubusercontent.com/czodroid/dotfiles/master/config-fast-copy | sh
curl -fsSL https://raw.githubusercontent.com/czodroid/dotfiles/master/config-fast-ssh  | sh
rm -fr /root/.ssh_fast_*

# passwd
echo 'root:toor' | chpasswd

aptitude search '~i !~M' -F %p | LANG=C sort > pkg_inst_debian11.txt

date > /root/czo@free.fr

# mnt
mkdir -p /mnt/rootfs
mkdir -p /mnt/sda1
mkdir -p /mnt/sda2
mkdir -p /mnt/sdb1
mkdir -p /mnt/sdb2

# cleanup from syslinux rescue
find /usr/lib -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
find /usr/lib -type f,l -name '*.a' -delete
rm -rf /usr/lib/{libgo.*,libgphobos.*,libgfortran.*}
rm -rf /usr/share/gtk-doc /usr/share/doc /usr/share/keepassxc/docs/*.pdf
rm -rf /usr/share/keepassxc/translations
rm -rf /usr/share/help/*/ghex/
rm -rf /usr/share/gir*
# rm -rf /usr/include
# rm -rf /usr/share/man/man3

# Remove large/irrelevant firmwares
rm -rf /usr/lib/firmware/{liquidio,netronome,mellanox,mrvl/prestera,qcom}

# Remove extra locales
echo -e "MANDELETE\nDONTBOTHERNEWLOCALE\nSHOWFREEDSPACE\nen\nen_US\nen_US.UTF-8" > /etc/locale.nopurge
localepurge

apt $QUIET clean
rm -fr   /var/lib/apt
mkdir -p /var/lib/apt
rm -fr   /var/lib/aptitude
mkdir -p /var/lib/aptitude

# ssh
rm -f /etc/ssh/ssh_host_*_key /etc/ssh/ssh_host_*_key.pub
ln -s /etc/systemd/system/ssh-keygen-host.service /etc/systemd/system/multi-user.target.wants/ssh-keygen-host.service

# updatedb
/usr/bin/updatedb

# exit
EOF

cd
umount -lf $LIVE_BOOT/chroot/{run,dev/pts,dev,sys,proc}
sleep 1

echo " <- end chroot"

}


##================================================================
make_03_copyfiles() {

echo "-> COPY FILES =============================================="

# manque ssh-keygen -A
rm -f $LIVE_BOOT/chroot/etc/ssh/ssh_host_*_key $LIVE_BOOT/chroot/etc/ssh/ssh_host_*_key.pub

rsync -av --chown=root:root $LIVE_BOOT/../crdrootfs/ $LIVE_BOOT/chroot

mkdir -p $LIVE_BOOT/{staging/{EFI/BOOT,boot/grub/x86_64-efi,isolinux,live},tmp}

rm -f $LIVE_BOOT/staging/live/filesystem.squashfs
mksquashfs $LIVE_BOOT/chroot $LIVE_BOOT/staging/live/filesystem.squashfs -e boot

cp -f $LIVE_BOOT/chroot/boot/vmlinuz-* $LIVE_BOOT/staging/live/vmlinuz
cp -f $LIVE_BOOT/chroot/boot/initrd.img-* $LIVE_BOOT/staging/live/initrd

}


##================================================================
make_04_bootloader() {

echo "-> Prepare Boot Loader Menus ==============================="

cat <<'EOF' > $LIVE_BOOT/staging/isolinux/isolinux.cfg
serial 0 115200
ui menu.c32
timeout 3000
menu default
prompt 0

menu title Czo Rescue (2022-12-18)

menu MARGIN 8
menu ROWS 10
menu TABMSGROW 16
menu CMDLINEROW 16

label Debian Czo Rescue (debian11 ZFS)                 (root/toor)
    menu default
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live

label Debian Czo Rescue (debian11 ZFS, nomodeset)      (root/toor)
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live nomodeset

EOF

cat <<'EOF' > $LIVE_BOOT/staging/boot/grub/grub.cfg
insmod part_gpt
insmod part_msdos
insmod fat
insmod iso9660

insmod all_video
insmod font

set default="0"
set timeout=300

# If X has issues finding screens, experiment with/without nomodeset.

menuentry "Debian Czo Rescue [EFI/GRUB]" {
    search --no-floppy --set=root --label DEBLIVE
    linux ($root)/live/vmlinuz boot=live
    initrd ($root)/live/initrd
}

menuentry "Debian Czo Rescue [EFI/GRUB] (nomodeset)" {
    search --no-floppy --set=root --label DEBLIVE
    linux ($root)/live/vmlinuz boot=live nomodeset
    initrd ($root)/live/initrd
}
EOF

cp $LIVE_BOOT/staging/boot/grub/grub.cfg $LIVE_BOOT/staging/EFI/BOOT/

cat <<'EOF' > $LIVE_BOOT/tmp/grub-embed.cfg
if ! [ -d "$cmdpath" ]; then
    # On some firmware, GRUB has a wrong cmdpath when booted from an optical disc.
    # https://gitlab.archlinux.org/archlinux/archiso/-/issues/183
    if regexp --set=1:isodevice '^(\([^)]+\))\/?[Ee][Ff][Ii]\/[Bb][Oo][Oo][Tt]\/?$' "$cmdpath"; then
        cmdpath="${isodevice}/EFI/BOOT"
    fi
fi
configfile "${cmdpath}/grub.cfg"
EOF

##================================================================
echo "-> Prepare Boot Loader Files ==============================="

cp /usr/lib/ISOLINUX/isolinux.bin "$LIVE_BOOT/staging/isolinux/"
cp /usr/lib/syslinux/modules/bios/* "$LIVE_BOOT/staging/isolinux/"

cp -r /usr/lib/grub/x86_64-efi/* "$LIVE_BOOT/staging/boot/grub/x86_64-efi/"

grub-mkstandalone -O i386-efi \
    --modules="part_gpt part_msdos fat iso9660" \
    --locales="" \
    --themes="" \
    --fonts="" \
    --output="$LIVE_BOOT/staging/EFI/BOOT/BOOTIA32.EFI" \
    "boot/grub/grub.cfg=$LIVE_BOOT/tmp/grub-embed.cfg"

grub-mkstandalone -O x86_64-efi \
    --modules="part_gpt part_msdos fat iso9660" \
    --locales="" \
    --themes="" \
    --fonts="" \
    --output="$LIVE_BOOT/staging/EFI/BOOT/BOOTx64.EFI" \
    "boot/grub/grub.cfg=$LIVE_BOOT/tmp/grub-embed.cfg"

(cd $LIVE_BOOT/staging && \
    dd if=/dev/zero of=efiboot.img bs=1M count=20 && \
    mkfs.vfat efiboot.img && \
    mmd -i efiboot.img ::/EFI ::/EFI/BOOT && \
    mcopy -vi efiboot.img \
        $LIVE_BOOT/staging/EFI/BOOT/BOOTIA32.EFI \
        $LIVE_BOOT/staging/EFI/BOOT/BOOTx64.EFI \
        $LIVE_BOOT/staging/boot/grub/grub.cfg \
        ::/EFI/BOOT/
)

}


##================================================================
make_05_iso() {

echo "-> Create Bootable ISO ====================================="

rm -f $LIVE_BOOT/$ISO_NAME ; \
xorriso \
    -as mkisofs \
    -iso-level 3 \
    -full-iso9660-filenames \
    -volid "DEBLIVE" \
    --mbr-force-bootable -partition_offset 16 \
    -joliet -joliet-long -rational-rock \
    -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
    -eltorito-boot isolinux/isolinux.bin \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        --eltorito-catalog isolinux/isolinux.cat \
    -eltorito-alt-boot \
        -e --interval:appended_partition_2:all:: \
        -no-emul-boot \
        -isohybrid-gpt-basdat \
    -append_partition 2 C12A7328-F81F-11D2-BA4B-00A0C93EC93B $LIVE_BOOT/staging/efiboot.img \
    "$LIVE_BOOT/staging" \
    -o "$LIVE_BOOT/$ISO_NAME" \


#xorriso -as mkisofs -iso-level 3 -full-iso9660-filenames -volid RESCUE806 -eltorito-boot boot/syslinux/isolinux.bin -eltorito-catalog boot/syslinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -isohybrid-mbr boot/syslinux/isohdpfx.bin -eltorito-alt-boot -e EFI/archiso/efiboot.img -no-emul-boot -isohybrid-gpt-basdat -o ../$NAME.iso .

}

run_once make_01_prepare
run_once make_02_chroot
run_once make_03_copyfiles
run_once make_04_bootloader
run_once make_05_iso

) 2>&1 | tee -a $LOG


exit
#== END ==================================================


#== TRUC ================================================
exit
# AI apache2 libapache2-mod-php php php-curl php-gd imagemagick tidy



