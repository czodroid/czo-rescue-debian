#! /bin/bash
#
# Filename: make-czo-rescue-debian-iso
# Author: Olivier Sirol <czo@free.fr>
# License: GPL-2.0 (http://www.gnu.org/copyleft)
# File Created: 18 December 2022
# Last Modified: Sunday 15 January 2023, 21:19
# $Id: make-czo-rescue-debian-iso,v 1.63 2023/01/02 16:34:37 czo Exp $
# Edit Time: 100:01:13
# Description:
#       Live Debian for System Rescue, like Linux Arch SystemRescue
#       script to make a czo-rescue-debian ISO, to run on your host:
#       > apt install syslinux-efi grub-pc-bin grub-efi-amd64-bin grub-efi-ia32-bin debootstrap squashfs-tools xorriso isolinux mtools dosfstools bash coreutils
#
# Copyright: (C) 2022, 2023 Olivier Sirol <czo@free.fr>


set -e -u

SCRIPT_PATH=$(readlink -f ${0%/*})
export ISO_VERSION="$(<${SCRIPT_PATH}/VERSION)"
export ISO_DATE="$(date +%Y-%m-%d)"

export ARCH="amd64"
#export ARCH="686-pae"

export LIVE_BOOT=$SCRIPT_PATH/build-czo-rescue
export LOG=$LIVE_BOOT/build-czo-rescue.log

if [ $ARCH = "amd64" ]; then
    export ISO_NAME="czo-rescue-debian-${ISO_VERSION}.iso"
else
    export ISO_NAME="czo-rescue-debian-${ISO_VERSION}-${ARCH}.iso"
fi

unset LANGUAGE LC_ALL LC_MONETARY LC_PAPER LC_MEASUREMENT LC_TIME LC_NUMERIC LANG
export LANG=en_US.UTF-8

##================================================================
run_once() {

    echo "<==== $LIVE_BOOT/build.$1 ======================"
    if [ ! -e $LIVE_BOOT/build.$1 ]; then
        $1
        touch $LIVE_BOOT/build.$1
    fi
}

##================================================================
make_01_prepare() {

echo "-> Prepare ================================================="

echo ' -> rm old build $LIVE_BOOT ================================'
rm -fr $LIVE_BOOT
mkdir -p $LIVE_BOOT

echo " -> export LIVE_BOOT=$LIVE_BOOT"
echo

}

##================================================================
make_02_debootstrap() {

echo "-> debootstrap ============================================="

if [ $ARCH = "amd64" ]; then
    debootstrap --arch=amd64 --merged-usr --components=main,contrib,non-free --force-check-gpg bullseye $LIVE_BOOT/chroot http://deb.debian.org/debian/
else
    debootstrap --arch=i386 --merged-usr --components=main,contrib,non-free --force-check-gpg bullseye $LIVE_BOOT/chroot http://deb.debian.org/debian/
fi

# --arch=i386
# --arch=amd64
# --variant=minbase
# --print-debs

}

##================================================================
make_03_chroot() {

echo "-> Chroot =================================================="

## test
# echo
# echo "export LIVE_BOOT=$LIVE_BOOT"
# echo 'cp -f ~/.bashrc $LIVE_BOOT/chroot/root'
# echo 'rm $LIVE_BOOT/build.make_0{3,4,5,6}*'
# echo 'umount -lf $LIVE_BOOT/chroot/{run,dev/pts,dev,sys,proc}'
# echo 'umount -lf $LIVE_BOOT/chroot/{run,dev/pts,dev,sys,proc} ; sleep 1 && rsync --delete -av $LIVE_BOOT/../savebuild/ $LIVE_BOOT && for p in proc sys dev dev/pts run; do mount --make-rslave --rbind /$p $LIVE_BOOT/chroot/$p ; done && chroot $LIVE_BOOT/chroot /bin/bash ; umount -lf $LIVE_BOOT/chroot/{run,dev/pts,dev,sys,proc}'
# exit

for p in proc sys dev dev/pts run ; do mount --make-rslave --rbind /$p $LIVE_BOOT/chroot/$p ; done

chroot $LIVE_BOOT/chroot /bin/bash <<'EOF'

set -e -u

export QUIET="-q -y"
export DEBIAN_FRONTEND=noninteractive
#export DEBIAN_PRIORITY=critical

unset LANGUAGE LC_ALL LC_MONETARY LC_PAPER LC_MEASUREMENT LC_TIME LC_NUMERIC LANG
export LANG=en_US.UTF-8

echo $(date +%Y-%m-%d) > /etc/lsb-czo-installdate
echo $(date +%Y-%m-%d) > /etc/lsb-czo-updatedate

echo "czo-rescue-debian" > /etc/hostname
echo "czo-rescue-debian" > /etc/mailname
echo "LANG=en_US.UTF-8" > /etc/default/locale

echo "--> apt update"
cat << 'HEREDOC' > /etc/apt/sources.list
deb http://deb.debian.org/debian/ bullseye main contrib non-free
deb http://security.debian.org/ bullseye-security main contrib non-free
deb http://deb.debian.org/debian/ bullseye-updates main contrib non-free
HEREDOC

apt-get $QUIET update

##==================================================##

echo "--> install kernel ($ARCH)"
#--no-install-recommends

if [ $ARCH = "amd64" ]; then
    apt-get $QUIET --no-install-recommends install linux-image-amd64 linux-headers-amd64 intel-microcode amd64-microcode firmware-linux-free firmware-linux-nonfree firmware-misc-nonfree firmware-ath9k-htc firmware-atheros firmware-b43-installer firmware-b43legacy-installer firmware-bnx2 firmware-bnx2x firmware-brcm80211 firmware-cavium firmware-iwlwifi firmware-libertas firmware-realtek firmware-zd1211
else
    apt-get $QUIET --no-install-recommends install linux-image-686 linux-headers-686 linux-image-686-pae linux-headers-686-pae intel-microcode amd64-microcode firmware-linux-free firmware-linux-nonfree firmware-misc-nonfree firmware-ath9k-htc firmware-atheros firmware-b43-installer firmware-b43legacy-installer firmware-bnx2 firmware-bnx2x firmware-brcm80211 firmware-cavium firmware-iwlwifi firmware-libertas firmware-realtek firmware-zd1211
fi

echo "--> install packages"
apt-get $QUIET install aptitude apt-utils autofs bash bash-completion bc bind9-dnsutils bind9-host bzip2 ca-certificates chntpw clonezilla cloud-guest-utils cloud-image-utils colordiff command-not-found cpio cron cryptsetup curl cvs dbus debconf-i18n debconf-utils debootstrap dmraid dnsutils dosfstools ethtool ext4magic exuberant-ctags fdisk file gddrescue gdisk gettext-base git gocryptfs gpart groff-base grub-efi-amd64-bin grub-efi-ia32-bin grub-pc-bin hashalot hdparm hexcurse htop iftop ifupdown init ioping iotop iperf iperf3 ipmitool iproute2 iptraf iputils-ping isc-dhcp-client isc-dhcp-common isolinux jfsutils kmod kpartx less lftp libguestfs-tools liblockfile-bin libnet-xmpp-perl libnfs-utils libnss-systemd libpam-mount libpam-systemd libqcow-utils libterm-readline-gnu-perl libusb-dev live-boot lm-sensors localepurge logrotate lrzip lsb-release lshw lsof lz4 m4 man-db manpages mc media-types mime-support mlocate moreutils mtools nano ncdu ncurses-term netcat netcat-traditional net-tools network-manager network-manager-openvpn network-manager-vpnc nfs-client nfs-kernel-server nftables nmap ntpdate nullmailer openconnect openssh-client p7zip-full paperkey par2 partclone parted pciutils perltidy picocom procps pv python3-reportbug qemu-guest-agent rar rcs readline-common recode reiser4progs reiserfsprogs rename reportbug rsync rsyslog screen sdparm sensible-utils smbclient socat sqlite3 squashfs-tools squashfs-tools-ng ssh strace stress syslinux-efi sysstat systemd systemd-sysv systemd-timesyncd tasksel tcpdump telnet tidy tmate tmux traceroute tree tzdata ucf udev vim vim-common vim-tiny vlock wamerican wget whiptail whois wireless-tools xfsprogs xorriso xz-utils zfs-initramfs zsh zstd xinit xfce4 xfce4-screenshooter xfce4-power-manager-plugins xfce4-systemload-plugin xfce4-taskmanager xfce4-terminal xfce4-whiskermenu-plugin xfce4-xkb-plugin xterm lightdm- gparted vim-gtk xauth xsel xclip xdotool gnome-themes-extra network-manager-gnome gsmartcontrol firefox-esr webext-ublock-origin-firefox xfburn ghex xarchiver rdesktop remmina ristretto x11vnc galculator mousepad dislocker meld yelp- fonts-dejavu fonts-noto-color-emoji fonts-wqy-microhei fonts-lato- fonts-droid-fallback- fonts-noto-mono- fonts-font-awesome- fonts-urw-base35- live-boot-doc- atm-tools dump fatresize fido2-tools foremost fsarchiver graphicsmagick-imagemagick-compat hardinfo hardlink hwinfo icu-devtools inxi jq lame ldnsutils libcap-ng-utils libnss3-tools mtr nwipe rclone rdiff stoken testdisk wimtools wipe xbacklight ffmpeg

# pocketsphinx-en-us- libpocketsphinx3-
# ghostscript-
# krb5-user
# krb5-locales
# gstreamer1.0-libav
# broadcom-sta-dkms
# xserver-xorg-input-synaptics
# keepassxc

# EOF
# exit

echo "--> mkinitramfs"
#find /usr/lib -type f -name "lib*.so.*" -exec strip --strip-all {} \;
#find /usr/lib/modules/$(uname -r) -type f -name "*.ko" -exec strip --strip-unneeded {} \;

mkinitramfs -c xz -o /boot/initrd.img-$(uname -r)

##==================================================##

echo "--> configuration"

# dpkg-reconfigure locales
perl -i -pe 's,# en_US.UTF-8 UTF-8,en_US.UTF-8 UTF-8,' /etc/locale.gen
perl -i -pe 's,# fr_FR.UTF-8 UTF-8,fr_FR.UTF-8 UTF-8,' /etc/locale.gen
locale-gen
update-locale LANG=en_US.UTF-8

# dpkg-reconfigure tzdata
#ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
ln -fs /usr/share/zoneinfo/Europe/Paris /etc/localtime
dpkg-reconfigure -f noninteractive tzdata

# sshd
#in debian 7,8,9 ^Permit, in debian 10 ^#Permit
perl -i -pe 's,^#?PermitRootLogin.*,PermitRootLogin yes,' /etc/ssh/sshd_config
#arch linux
perl -i -pe 's,^#?X11Forwarding.*,X11Forwarding yes,' /etc/ssh/sshd_config
#systemctl restart sshd
ln -fs /etc/systemd/system/ssh-keygen-host.service /etc/systemd/system/multi-user.target.wants/ssh-keygen-host.service

# rescue-initialize
ln -fs /etc/systemd/system/rescue-initialize.service /etc/systemd/system/multi-user.target.wants/rescue-initialize.service

# pulseaudio
ln -fs /dev/null /etc/udev/rules.d/90-alsa-restore.rules

# systemd
perl -i -pe 's/#(Storage=)auto/$1volatile/' /etc/systemd/journald.conf
perl -i -pe 's/#(Audit=)/$1no/' /etc/systemd/journald.conf

perl -i -pe 's/#(HandleSuspendKey=)suspend/$1ignore/' /etc/systemd/logind.conf
perl -i -pe 's/#(HandleHibernateKey=)hibernate/$1ignore/' /etc/systemd/logind.conf
perl -i -pe 's/#(HandleLidSwitch=)suspend/$1ignore/' /etc/systemd/logind.conf

# autofs
perl -i -pe 's,^#/net\s*-hosts.*,/net    -hosts,' /etc/auto.master
systemctl restart autofs

# my dot config
cd /root
curl -fsSL https://raw.githubusercontent.com/czodroid/dotfiles/master/config-fast-copy | sh
curl -fsSL https://raw.githubusercontent.com/czodroid/dotfiles/master/config-fast-ssh  | sh
rm -fr /root/.ssh_fast_*

# passwd
echo 'root:toor' | chpasswd

# mnt
mkdir -p /mnt/rootfs
mkdir -p /mnt/sda1
mkdir -p /mnt/sda2
mkdir -p /mnt/sdb1
mkdir -p /mnt/sdb2

echo "--> cleanup"

apt-get $QUIET purge 'linux-headers-*'
apt-get $QUIET autoremove

find /usr/lib -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
rm -rf /usr/share/gtk-doc /usr/share/doc
rm -rf /usr/share/keepassxc/docs /usr/share/keepassxc/translations
rm -rf /usr/share/help

echo -e "MANDELETE\nDONTBOTHERNEWLOCALE\nSHOWFREEDSPACE\nen\nen_US\nen_US.UTF-8" > /etc/locale.nopurge
localepurge

dpkg-query -Wf '${Package}\n'| LANG=C sort > /root/pkg_list_rescue.txt
dpkg-query -Wf '${Installed-Size}\t${Package} (${version})\n' | LANG=C sort -rn > /root/pkg_size_rescue.txt
apt-get $QUIET clean

rm -fr   /var/cache/ldconfig
rm -fr   /var/cache/apt
mkdir -p /var/cache/apt
rm -fr   /var/lib/apt
mkdir -p /var/lib/apt
rm -fr   /var/lib/aptitude
mkdir -p /var/lib/aptitude

updatedb

rm -f /etc/ssh/ssh_host_*_key /etc/ssh/ssh_host_*_key.pub
rm -f /var/lib/dbus/machine-id
cat /dev/null > /etc/machine-id
cat /dev/null > /etc/fstab
echo "nameserver 8.8.8.8" > /etc/resolv.conf

EOF

cd
umount -lf $LIVE_BOOT/chroot/{run,dev/pts,dev,sys,proc}
sleep 1

echo " <- end chroot"

}


##================================================================
make_04_copyfiles() {

echo "-> Copy files =============================================="

rsync -av --chown=root:root $LIVE_BOOT/../liverootfs/ $LIVE_BOOT/chroot
#    cp -af --no-preserve=ownership ${script_path}/airootfs ${work_dir}/${arch}
#             Czo Rescue Debian 11.6 (2023-01-11)\e[m

cat << HEREDOC > $LIVE_BOOT/chroot/etc/issue

\e[32m        Czo Rescue Debian $ISO_VERSION ($ISO_DATE)\e[m

\e[97m===== https://gitlab.com/czo/czo-rescue-debian =====\e[m

Debian GNU/Linux 11 \n \l

HEREDOC


echo "-> Copy staging ============================================"

mkdir -p $LIVE_BOOT/{staging/{EFI/BOOT,EFI/debianiso,boot/grub/x86_64-efi,isolinux,live},tmp}

cat << HEREDOC > $LIVE_BOOT/staging/czo-rescue-debian
Czo Rescue Debian $ISO_VERSION ($ISO_DATE)

--
https://gitlab.com/czo/czo-rescue-debian

HEREDOC

if [ $ARCH = "amd64" ]; then
    cp -f $LIVE_BOOT/chroot/boot/vmlinuz-*-amd64 $LIVE_BOOT/staging/live/vmlinuz
    cp -f $LIVE_BOOT/chroot/boot/initrd.img-*-amd64 $LIVE_BOOT/staging/live/initrd
else
    cp -f $LIVE_BOOT/chroot/boot/vmlinuz-*-pae $LIVE_BOOT/staging/live/vmlinuz
    cp -f $LIVE_BOOT/chroot/boot/initrd.img-*-pae $LIVE_BOOT/staging/live/initrd
fi

cp -f $LIVE_BOOT/chroot/boot/memtest.bin $LIVE_BOOT/staging/live/memtest.bin
cp -f $LIVE_BOOT/chroot/boot/memtest.efi $LIVE_BOOT/staging/live/memtest.efi
cp -f $LIVE_BOOT/chroot/boot/LICENSE.memtest $LIVE_BOOT/staging/live/LICENSE.memtest

}

##================================================================
make_05_squashfs() {

echo "-> Squashfs ==============================================="

rm -f $LIVE_BOOT/staging/live/filesystem.squashfs

mksquashfs $LIVE_BOOT/chroot $LIVE_BOOT/staging/live/filesystem.squashfs -comp zstd -e boot
#minsize
#mksquashfs $LIVE_BOOT/chroot $LIVE_BOOT/staging/live/filesystem.squashfs -comp xz -Xbcj x86 -b 512k -Xdict-size 512k -e boot

}

##================================================================
make_06_bootloader() {

echo "-> Prepare Boot Loader Menus ==============================="

cat <<EOF > $LIVE_BOOT/staging/isolinux/isolinux.cfg
serial 0 115200
ui menu.c32
timeout 3000
menu default
prompt 0

menu title Czo Rescue Debian $ISO_VERSION ($ISO_DATE)

menu margin 8
menu rows 10
menu tabmsgrow 16
menu cmdlinerow 16

label Boot Czo Rescue Debian, zfs/toram/startx         (root/toor)
    menu default
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live toram=filesystem.squashfs dostartx

label Boot Czo Rescue Debian, zfs/console/toram/SERIAL (root/toor)
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live toram=filesystem.squashfs console=ttyS0,115200n8

label Boot Czo Rescue Debian, zfs/console              (root/toor)
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live

label Boot Czo Rescue Debian, failsafe                 (root/toor)
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live memtest noapic noapm nodma nomce nolapic nomodeset nosmp nosplash vga=788

label TEST ISO Czo Rescue Debian
    kernel /boot/memdisk iso
    append initrd=/boot/images/czo-rescue-debian-11.6.iso
}

label Run Memtest86+
    linux /live/memtest.bin

label Reboot
    com32 reboot.c32

label Power Off
    com32 poweroff.c32

EOF

cat <<EOF > $LIVE_BOOT/staging/boot/grub/grub.cfg
insmod part_gpt
insmod part_msdos
insmod fat
insmod iso9660

# Global options
set timeout=300
# start with 0
set default=2
set fallback=2
set pager=1

#serial --speed=115200 efi0
serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1
terminal_output serial console
terminal_input serial console

insmod efi_gop
insmod efi_uga

menuentry "                Czo Rescue Debian $ISO_VERSION ($ISO_DATE)" { czo }

menuentry "" { czo }

menuentry "Czo Rescue Debian, zfs/toram/startx           (root/toor)" {
    echo "Czo Rescue Debian launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux (\$root)/live/vmlinuz boot=live toram=filesystem.squashfs dostartx
    initrd (\$root)/live/initrd
}

menuentry "Czo Rescue Debian, zfs/console/toram/SERIAL   (root/toor)" {
    echo "Czo Rescue Debian launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux (\$root)/live/vmlinuz boot=live toram=filesystem.squashfs console=ttyS0,115200n8
    initrd (\$root)/live/initrd
}

menuentry "Czo Rescue Debian, zfs/console                (root/toor)" {
    echo "Czo Rescue Debian launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux (\$root)/live/vmlinuz boot=live
    initrd (\$root)/live/initrd
}

menuentry "Czo Rescue Debian, failsafe                   (root/toor)" {
    echo "Czo Rescue Debian launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux (\$root)/live/vmlinuz boot=live memtest noapic noapm nodma nomce nolapic nomodeset nosmp nosplash vga=788
    initrd (\$root)/live/initrd
}

menuentry "TEST ISO Czo Rescue Debian" {
    echo "ISO Czo Rescue Debian launch in progress, please stand by..."
    set root='hd0,msdos1'
    #search --no-floppy --set=root --label RESCUE
    linux16 (\$root)/isolinux/memdisk iso
    initrd16 (\$root)/boot/images/czo-rescue-debian-11.6.iso
}

menuentry "TEST ISO Czo Rescue Debian, kernel and initrd" {
    echo "ISO Czo Rescue Debian launch in progress, please stand by..."
    set isoname="/boot/images/czo-rescue-debian-11.6.iso"
    loopback loop (hd0,msdos1)"\${isoname}"
    linux (loop)/live/vmlinuz boot=live findiso="\${isoname}" toram=filesystem.squashfs
    initrd (loop)/live/initrd
}

menuentry "Run Memtest86+" {
    echo "Memtest86+ launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux (\$root)/live/memtest.efi keyboard=both
}

menuentry "EFI Firmware setup" {
    fwsetup
}

menuentry "Reboot" {
    reboot
}

menuentry "Power Off" {
    halt
}

EOF

cp $LIVE_BOOT/staging/boot/grub/grub.cfg $LIVE_BOOT/staging/EFI/BOOT/

cat <<'EOF' > $LIVE_BOOT/tmp/grub-embed.cfg
if ! [ -d "$cmdpath" ]; then
    # On some firmware, GRUB has a wrong cmdpath when booted from an optical disc.
    # https://gitlab.archlinux.org/archlinux/archiso/-/issues/183
    if regexp --set=1:isodevice '^(\([^)]+\))\/?[Ee][Ff][Ii]\/[Bb][Oo][Oo][Tt]\/?$' "$cmdpath"; then
        cmdpath="${isodevice}/EFI/BOOT"
    fi
fi
configfile "${cmdpath}/grub.cfg"
EOF

##================================================================
echo "-> Prepare Boot Loader Files ==============================="

cp /usr/lib/ISOLINUX/isolinux.bin "$LIVE_BOOT/staging/isolinux/"
cp /usr/lib/syslinux/modules/bios/* "$LIVE_BOOT/staging/isolinux/"

cp -r /usr/lib/grub/x86_64-efi/* "$LIVE_BOOT/staging/boot/grub/x86_64-efi/"
rm -fr $LIVE_BOOT/staging/boot/grub/x86_64-efi/monolithic

grub-mkstandalone -O i386-efi \
    --modules="part_gpt part_msdos fat iso9660" \
    --locales="" \
    --themes="" \
    --fonts="" \
    --output="$LIVE_BOOT/staging/EFI/BOOT/BOOTIA32.EFI" \
    "boot/grub/grub.cfg=$LIVE_BOOT/tmp/grub-embed.cfg"

grub-mkstandalone -O x86_64-efi \
    --modules="part_gpt part_msdos fat iso9660" \
    --locales="" \
    --themes="" \
    --fonts="" \
    --output="$LIVE_BOOT/staging/EFI/BOOT/BOOTx64.EFI" \
    "boot/grub/grub.cfg=$LIVE_BOOT/tmp/grub-embed.cfg"

(cd $LIVE_BOOT/staging/EFI/debianiso && \
    dd if=/dev/zero of=efiboot.img bs=1M count=20 && \
    mkfs.vfat efiboot.img && \
    mmd -i efiboot.img ::/EFI ::/EFI/BOOT && \
    mcopy -vi efiboot.img \
        $LIVE_BOOT/staging/EFI/BOOT/BOOTIA32.EFI \
        $LIVE_BOOT/staging/EFI/BOOT/BOOTx64.EFI \
        $LIVE_BOOT/staging/boot/grub/grub.cfg \
        ::/EFI/BOOT/
)

}


##================================================================
make_07_iso() {

echo "-> Create Bootable ISO ====================================="

rm -f $LIVE_BOOT/$ISO_NAME ; \

# xorriso \
#     -as mkisofs \
#     -iso-level 3 \
#     -full-iso9660-filenames \
#     -volid "RESCUE" \
#     --mbr-force-bootable -partition_offset 16 \
#     -joliet -joliet-long -rational-rock \
#     -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
#     -eltorito-boot isolinux/isolinux.bin \
#         -no-emul-boot \
#         -boot-load-size 4 \
#         -boot-info-table \
#         --eltorito-catalog isolinux/isolinux.cat \
#     -eltorito-alt-boot \
#         -e --interval:appended_partition_2:all:: \
#         -no-emul-boot \
#         -isohybrid-gpt-basdat \
#     -append_partition 2 0xef $LIVE_BOOT/staging/EFI/debianiso/efiboot.img \
#     "$LIVE_BOOT/staging" \
#     -o "$LIVE_BOOT/$ISO_NAME"

#    -append_partition 2 C12A7328-F81F-11D2-BA4B-00A0C93EC93B $LIVE_BOOT/staging/EFI/debianiso/efiboot.img \
#    -append_partition 2 0xef $LIVE_BOOT/staging/EFI/debianiso/efiboot.img \

## rescue arch iso
xorriso \
    -as mkisofs \
    -iso-level 3 \
    -full-iso9660-filenames \
    -volid RESCUE \
    -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
    -eltorito-boot isolinux/isolinux.bin \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        -eltorito-catalog isolinux/isolinux.cat \
    -eltorito-alt-boot \
        -e EFI/debianiso/efiboot.img \
        -no-emul-boot \
        -isohybrid-gpt-basdat \
    $LIVE_BOOT/staging \
    -o "$LIVE_BOOT/$ISO_NAME"

echo
ls -alh "$LIVE_BOOT/$ISO_NAME"

}

# no log
run_once make_01_prepare

(
run_once make_02_debootstrap
run_once make_03_chroot
run_once make_04_copyfiles
run_once make_05_squashfs
run_once make_06_bootloader
run_once make_07_iso
) 2>&1 | tee -a $LOG


exit
#== END ==================================================

# AI apache2 libapache2-mod-php php php-curl php-gd imagemagick tidy
