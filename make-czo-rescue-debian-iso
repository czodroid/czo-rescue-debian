#! /bin/bash
#
# Filename: make-czo-rescue-debian-iso
# Author: Olivier Sirol <czo@free.fr>
# License: GPL-2.0 (http://www.gnu.org/copyleft)
# File Created: 18 December 2022
# Last Modified: Sunday 26 May 2024, 17:12
# $Id: make-czo-rescue-debian-iso,v 1.94 2024/05/26 15:13:01 czo Exp $
# Edit Time: 138:47:57
# Description:
#
#       This script creates a czo-rescue-debian ISO
#
#       It's a live Linux Debian Rescue
#
#       to run on your host:
#           apt install syslinux-efi grub-pc-bin grub-efi-amd64-bin grub-efi-ia32-bin isolinux mtools dosfstools bash coreutils debootstrap squashfs-tools libarchive-tools xorriso isomd5sum make
#
#       Debug in chroot:
#           export LIVE_BOOT=$LIVE_BOOT
#           cp -f ~/.bashrc $LIVE_BOOT/chroot/root
#           rm $LIVE_BOOT/build.make_0{2,3,4,5,6}*
#           chroot $LIVE_BOOT/chroot /bin/bash
#           exit
#
#           umount -lf $LIVE_BOOT/chroot/{run,dev/pts,dev,sys,proc} ; sleep 1 && rsync_full $LIVE_BOOT/../savebuild/ $LIVE_BOOT && for p in proc sys dev dev/pts run; do mount --make-rslave --rbind /$p $LIVE_BOOT/chroot/$p ; done && chroot $LIVE_BOOT/chroot /bin/bash ; umount -lf $LIVE_BOOT/chroot/{run,dev/pts,dev,sys,proc}
#
#       References:
#           https://manpages.debian.org/testing/live-boot-doc/live-boot.7.en.html
#           https://www.willhaley.com/blog/custom-debian-live-environment
#           https://gitlab.com/systemrescue/systemrescue-sources
#
# Copyright: (C) 2022-2024 Olivier Sirol <czo@free.fr>

set -e -u

if [ `id -u` -ne 0 ]; then
    echo "ERROR: this script must be run as root"
    exit 42
fi

# Release
export RESCUE_RELEASE="bookworm"
export RESCUE_ID="12"

export SCRIPT_PATH=$(readlink -f ${0%/*})
export ISO_VERSION="$(<${SCRIPT_PATH}/version)"
export ISO_DATE="$(date +%Y-%m-%d)"
export ISO_PUBLISHER="Czo-Rescue-Debian <https://gitlab.com/czo/czo-rescue-debian>"
export ISO_APPLICATION="Czo-Rescue-Debian"

# Live build and log
export LIVE_BOOT=$SCRIPT_PATH/build-czo-rescue
export LOG=$LIVE_BOOT/build-czo-rescue.log

# Debootstrap for amd64 or 686-pae
export ARCH="amd64"
#export ARCH="686-pae"

# Name of the ISO
if [ $ARCH = "amd64" ]; then
    export ISO_NAME="czo-rescue-debian-${ISO_VERSION}.iso"
else
    export ISO_NAME="czo-rescue-debian-${ISO_VERSION}-${ARCH}.iso"
fi

# Execute lang
unset LANGUAGE LC_ALL LC_MONETARY LC_PAPER LC_MEASUREMENT LC_TIME LC_NUMERIC LANG
#export LANG=en_US.UTF-8

# Execution time
export RTMStart=$(date +%s)

echo "==> export LIVE_BOOT=$LIVE_BOOT"

##================================================================
variable() {
    echo
    for v in ARCH ISO_NAME ISO_VERSION LIVE_BOOT SCRIPT_PATH RESCUE_ID RESCUE_RELEASE
    do
        echo "$v: ${!v}"
    done
    echo
}

##================================================================
run_once() {

    echo
    echo "##==== $1 $(date "+(%Y-%m-%d %H:%M:%S)") =================================================##"
    echo
    if [ ! -e $LIVE_BOOT/build.$1 ]; then
        $1
        touch $LIVE_BOOT/build.$1
    fi
}

##================================================================
## Prepare

make_00_prepare() {

echo ' -> rm old build $LIVE_BOOT'
rm -fr $LIVE_BOOT
mkdir -p $LIVE_BOOT

}

##================================================================
## Debootstrap

make_01_debootstrap() {

echo "# This file is the log of the script make-czo-rescue-debian-iso"
echo "# executed on $(date)"
echo
echo "==> export LIVE_BOOT=$LIVE_BOOT"
echo

# --arch=i386
# --arch=amd64
# --variant=minbase
# --print-debs
# --components=main,contrib,non-free for deb < 12

if [ $ARCH = "amd64" ]; then
    debootstrap --arch=amd64 --merged-usr --components=main,contrib,non-free,non-free-firmware --force-check-gpg ${RESCUE_RELEASE} $LIVE_BOOT/chroot http://deb.debian.org/debian/
else
    debootstrap --arch=i386  --merged-usr --components=main,contrib,non-free,non-free-firmware --force-check-gpg ${RESCUE_RELEASE} $LIVE_BOOT/chroot http://deb.debian.org/debian/
fi

}

##================================================================
## Chroot

make_02_chroot() {

echo " -> Copy packages"
cp $SCRIPT_PATH/packages $LIVE_BOOT/chroot/tmp

echo " -> Chroot"

for p in proc sys dev dev/pts run ; do mount --make-rslave --rbind /$p $LIVE_BOOT/chroot/$p ; done

chroot $LIVE_BOOT/chroot /bin/bash <<'EOF'

set -e -u

export QUIET="-q -y"
export DEBIAN_FRONTEND=noninteractive
#export DEBIAN_PRIORITY=critical

unset LANGUAGE LC_ALL LC_MONETARY LC_PAPER LC_MEASUREMENT LC_TIME LC_NUMERIC LANG
# export LANG=en_US.UTF-8

echo $(date +%Y-%m-%d) > /etc/lsb-czo-installdate
echo $(date +%Y-%m-%d) > /etc/lsb-czo-updatedate

echo "czo-rescue-debian" > /etc/hostname
echo "czo-rescue-debian" > /etc/mailname
echo "LANG=en_US.UTF-8" > /etc/default/locale

echo "--> apt update, $RESCUE_RELEASE"
cat << HEREDOC > /etc/apt/sources.list
deb http://deb.debian.org/debian ${RESCUE_RELEASE} main contrib non-free non-free-firmware
deb http://security.debian.org/debian-security ${RESCUE_RELEASE}-security main contrib non-free non-free-firmware
deb http://deb.debian.org/debian ${RESCUE_RELEASE}-updates main contrib non-free non-free-firmware
HEREDOC

apt-get $QUIET update
apt-get $QUIET upgrade

##==================================================##

echo "--> install kernel ($ARCH)"
#--no-install-recommends

if [ $ARCH = "amd64" ]; then
    apt-get $QUIET --no-install-recommends install linux-image-amd64 linux-headers-amd64 intel-microcode amd64-microcode firmware-linux-free firmware-linux-nonfree firmware-misc-nonfree firmware-ath9k-htc firmware-atheros firmware-b43-installer firmware-b43legacy-installer firmware-bnx2 firmware-bnx2x firmware-brcm80211 firmware-cavium firmware-iwlwifi firmware-libertas firmware-realtek firmware-zd1211
else
    apt-get $QUIET --no-install-recommends install linux-image-686 linux-headers-686 linux-image-686-pae linux-headers-686-pae intel-microcode amd64-microcode firmware-linux-free firmware-linux-nonfree firmware-misc-nonfree firmware-ath9k-htc firmware-atheros firmware-b43-installer firmware-b43legacy-installer firmware-bnx2 firmware-bnx2x firmware-brcm80211 firmware-cavium firmware-iwlwifi firmware-libertas firmware-realtek firmware-zd1211
fi

#EOF
#exit

RELEASE=$(dpkg-query -W -f='${binary:Package}\n' linux-image-* | head -n 1 | sed 's/linux-image-//')
echo $RELEASE > /tmp/release
echo "==> CHROOT: $RELEASE ($ARCH) ========================="

echo "--> install packages"
grep -v '^\s*#' /tmp/packages | xargs apt-get $QUIET install
rm -f /tmp/packages

echo 'bonding' >> /etc/modules

#find /usr/lib -type f -name "lib*.so.*" -exec strip --strip-all {} \;
#find /usr/lib/modules/$RELEASE -type f -name "*.ko" -exec strip --strip-unneeded {} \;

# EOF
# exit

echo "==> mkinitramfs =================="
#mkinitramfs -c xz -l 9 -o initrd.img--$RELEASE
perl -i -pe 's,^COMPRESS=.*,COMPRESS=xz,' /etc/initramfs-tools/initramfs.conf
perl -i -pe 's,^#?\s*COMPRESSLEVEL=.*,COMPRESSLEVEL=6,' /etc/initramfs-tools/initramfs.conf
update-initramfs -c -k $RELEASE

##==================================================##

echo "--> configuration"

# dpkg-reconfigure locales
perl -i -pe 's,# en_US.UTF-8 UTF-8,en_US.UTF-8 UTF-8,' /etc/locale.gen
perl -i -pe 's,# fr_FR.UTF-8 UTF-8,fr_FR.UTF-8 UTF-8,' /etc/locale.gen
locale-gen
update-locale LANG=en_US.UTF-8
export LANG=en_US.UTF-8

# dpkg-reconfigure tzdata
#ln -fs /usr/share/zoneinfo/Etc/UTC /etc/localtime
ln -fs /usr/share/zoneinfo/Europe/Paris /etc/localtime
dpkg-reconfigure -f noninteractive tzdata

# sshd
#in debian 7,8,9 ^Permit, in debian 10 ^#Permit
perl -i -pe 's,^#?PermitRootLogin.*,PermitRootLogin yes,' /etc/ssh/sshd_config
#arch linux
perl -i -pe 's,^#?X11Forwarding.*,X11Forwarding yes,' /etc/ssh/sshd_config
#systemctl restart sshd
ln -fs /etc/systemd/system/ssh-keygen-host.service /etc/systemd/system/multi-user.target.wants/ssh-keygen-host.service

# rescue-initialize
ln -fs /etc/systemd/system/rescue-initialize.service /etc/systemd/system/multi-user.target.wants/rescue-initialize.service

# pulseaudio
ln -fs /dev/null /etc/udev/rules.d/90-alsa-restore.rules

# systemd
perl -i -pe 's/#(Storage=)auto/$1volatile/' /etc/systemd/journald.conf
perl -i -pe 's/#(Audit=)/$1no/' /etc/systemd/journald.conf

perl -i -pe 's/#(HandleSuspendKey=)suspend/$1ignore/' /etc/systemd/logind.conf
perl -i -pe 's/#(HandleHibernateKey=)hibernate/$1ignore/' /etc/systemd/logind.conf
perl -i -pe 's/#(HandleLidSwitch=)suspend/$1ignore/' /etc/systemd/logind.conf

# autofs
perl -i -pe 's,^#/net\s*-hosts.*,/net    -hosts,' /etc/auto.master
systemctl restart autofs

# ipmi
systemctl disable openipmi.service

# my dot config
cd /root
curl -fsSL https://raw.githubusercontent.com/czodroid/dotfiles/master/config-fast-copy | sh
curl -fsSL https://raw.githubusercontent.com/czodroid/dotfiles/master/config-fast-ssh  | sh
ssh-keygen -c -C 'root@czo-rescue-debian' -f .ssh/id_rsa
rm -fr /root/.ssh_fast_*

# passwd
echo 'root:toor' | chpasswd

# mnt
mkdir -p /mnt/rootfs
mkdir -p /mnt/sda1
mkdir -p /mnt/sda2
mkdir -p /mnt/sdb1
mkdir -p /mnt/sdb2

echo "--> cleanup"

apt-get $QUIET purge 'linux-headers-*'
#apt-get $QUIET purge  build-essential gcc gcc-10  g++ g++-10 gcc-10-base gcc-9-base
apt-get $QUIET autoremove

find /usr/lib -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
#find /usr/lib -type f,l -name '*.a' -delete
rm -rf /usr/share/gtk-doc /usr/share/doc
rm -rf /usr/share/keepassxc/docs /usr/share/keepassxc/translations
rm -rf /usr/share/help

echo -e "MANDELETE\nDONTBOTHERNEWLOCALE\nSHOWFREEDSPACE\nen\nen_US\nen_US.UTF-8" > /etc/locale.nopurge
localepurge

echo "#  Name Version Size, Czo-Rescue-Debian $ISO_VERSION ($ISO_DATE), vim: set tabstop=50:" > /root/build-czo-rescue.packages
dpkg-query -Wf '${Package}\t${version}\t${Installed-Size}\n' | LANG=C sort >> /root/build-czo-rescue.packages
# cp -f /root/czo-rescue-debian /root/czo-rescue-debian.pkg /tmp
# dpkg-query -Wf '${Package}\n'| LANG=C sort > /root/pkg_list_rescue.txt
# dpkg-query -Wf '${Installed-Size} ${Package}\n' | LANG=C sort -rn > /root/pkg_size_rescue.txt
# dpkg-query -Wf '${Package} ${version}\n' | LANG=C sort > /root/pkg_version_rescue.txt
# cp -f /root/pkg_list_rescue.txt /root/pkg_size_rescue.txt /root/pkg_version_rescue.txt /tmp

apt-get $QUIET clean

rm -fr   /var/cache/ldconfig
rm -fr   /var/cache/apt
mkdir -p /var/cache/apt
rm -fr   /var/lib/apt
mkdir -p /var/lib/apt
rm -fr   /var/lib/aptitude
mkdir -p /var/lib/aptitude

## needed for bash cmd line
#apt-get update

updatedb

rm -f /etc/ssh/ssh_host_*_key /etc/ssh/ssh_host_*_key.pub
rm -f /var/lib/dbus/machine-id
cat /dev/null > /etc/machine-id
cat /dev/null > /etc/fstab
echo "nameserver 8.8.8.8" > /etc/resolv.conf

EOF

cd
umount -lf $LIVE_BOOT/chroot/{run,dev/pts,dev,sys,proc}
sleep 1

}


##================================================================
## Copy files

make_03_copyfiles() {

rsync -av --chown=root:root $LIVE_BOOT/../liverootfs/ $LIVE_BOOT/chroot

cat << HEREDOC > $LIVE_BOOT/chroot/etc/issue

Debian GNU/Linux $RESCUE_ID \n \l

\e[97m        Czo-Rescue-Debian $ISO_VERSION ($ISO_DATE)\e[m

\e[32m===== https://gitlab.com/czo/czo-rescue-debian =====\e[m

Type \e[97msetckbmap\e[m to choose the keyboard layout
Type \e[97mstartx\e[m to run the graphical environment
Type \e[97mmount -o remount,size=1G /run/live/overlay\e[m to change overlay

HEREDOC

cat << HEREDOC > $LIVE_BOOT/chroot/root/czo-rescue-debian
Czo-Rescue-Debian $ISO_VERSION ($ISO_DATE)

--
https://gitlab.com/czo/czo-rescue-debian

HEREDOC

mkdir -p $LIVE_BOOT/{staging/{EFI/BOOT,EFI/debianiso,boot/grub/x86_64-efi,isolinux/hdt,live},tmp}
cp -f $SCRIPT_PATH/README.md $LIVE_BOOT/chroot/root/README.md
cp -f $SCRIPT_PATH/README.md $LIVE_BOOT/staging/README.md
cp -f $SCRIPT_PATH/mkiso $LIVE_BOOT/staging/mkiso

cp -f $LIVE_BOOT/chroot/root/czo-rescue-debian $LIVE_BOOT/staging

cp -f $LIVE_BOOT/chroot/root/build-czo-rescue.packages $LIVE_BOOT/staging
cp -f $LIVE_BOOT/chroot/root/build-czo-rescue.packages $SCRIPT_PATH

cp -f $LIVE_BOOT/build-czo-rescue.log $LIVE_BOOT/staging

rm -f $LIVE_BOOT/chroot/vmlinuz.old
rm -f $LIVE_BOOT/chroot/initrd.img.old
rm -f $LIVE_BOOT/chroot/vmlinuz
rm -f $LIVE_BOOT/chroot/initrd.img

}

##================================================================
## Squashfs

make_04_squashfs() {

rm -f $LIVE_BOOT/staging/live/filesystem.squashfs

# faster:
#mksquashfs $LIVE_BOOT/chroot $LIVE_BOOT/staging/live/filesystem.squashfs -comp zstd -e boot
mksquashfs $LIVE_BOOT/chroot $LIVE_BOOT/staging/live/filesystem.squashfs -comp xz -Xbcj x86 -b 512k -Xdict-size 512k -e boot
(
cd $LIVE_BOOT/staging/live
sha512sum filesystem.squashfs > filesystem.squashfs.sha512
)

}

##================================================================
## Prepare Boot Loader Menus

make_05_bootloader() {

##================================================================
echo " -> isolinux.cfg"

cat <<HEREDOC > $LIVE_BOOT/staging/isolinux/isolinux.cfg
# Filename: isolinux.cfg
# Author: Olivier Sirol <czo@free.fr>
# License: GPL-2.0 (http://www.gnu.org/copyleft)

serial 0 115200
ui menu.c32
timeout 3000
menu default
prompt 0

menu title Czo-Rescue-Debian $ISO_VERSION ($ISO_DATE)

# https://www.syslinux.org/wiki/index.php?title=Comboot/menu.c32
# 25 for text mode, 28 for VESA graphics mode.
# rows go from 12 to 17, so +5, so help = -1

# menu margin      8
# menu rows       10
# menu tabmsgrow  16
# menu cmdlinerow 16

menu margin      8
menu rows       12
menu tabmsgrow  18
menu cmdlinerow 18

label Czo-Rescue-Debian, zfs/toram/startx              (root/toor)
    menu default
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live toram=filesystem.squashfs dostartx

label Czo-Rescue-Debian, zfs/toram/console/SERIAL      (root/toor)
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live toram=filesystem.squashfs console=ttyS0,115200n8

label Czo-Rescue-Debian, zfs/toram/console             (root/toor)
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live toram=filesystem.squashfs

label Czo-Rescue-Debian, zfs/startx                    (root/toor)
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live dostartx

label Czo-Rescue-Debian, zfs/console/SERIAL            (root/toor)
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live console=ttyS0,115200n8

label Czo-Rescue-Debian, zfs/console                   (root/toor)
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live

label Czo-Rescue-Debian, failsafe                      (root/toor)
    kernel /live/vmlinuz
    append initrd=/live/initrd boot=live memtest noapic noapm nodma nomce nolapic nomodeset nosmp nosplash

# label TEST ISO Czo-Rescue-Debian
#     kernel /boot/memdisk iso
#     append initrd=/boot/images/czo-rescue-debian-$ISO_VERSION.iso

## bsdtar -xf ../czo-rescue-debian-$ISO_VERSION.iso on pxe server, then:
# label TEST PXE Czo-Rescue-Debian, zfs/startx           (root/toor)
#   kernel /boot/czo-rescue-debian/czo-rescue-debian-$ISO_VERSION/live/vmlinuz
#   append initrd=/boot/czo-rescue-debian/czo-rescue-debian-$ISO_VERSION/live/initrd boot=live fetch=http://192.168.11.10/boot/czo-rescue-debian/czo-rescue-debian-$ISO_VERSION/live/filesystem.squashfs dostartx
#   ipappend 3

label Hardware Detection Tool
    com32  hdt.c32
    append modules_alias=hdt/modalias.gz pciids=hdt/pciids.gz

label Run Memtest86+
    linux /live/memtest.bin

label Reboot
    com32 reboot.c32

label Power Off
    com32 poweroff.c32

HEREDOC

##================================================================
echo " -> grub.cfg"

cat <<HEREDOC > $LIVE_BOOT/staging/boot/grub/grub.cfg
# Filename: grub.cfg
# Author: Olivier Sirol <czo@free.fr>
# License: GPL-2.0 (http://www.gnu.org/copyleft)

insmod part_gpt
insmod part_msdos
insmod fat
insmod iso9660
insmod chain

# Global options
set timeout=300
# start with 0
set default=2
set fallback=2
set pager=1

#serial --speed=115200 efi0
serial --unit=0 --speed=115200 --word=8 --parity=no --stop=1
terminal_output serial console
terminal_input serial console

insmod efi_gop
insmod efi_uga

menuentry "                Czo-Rescue-Debian $ISO_VERSION ($ISO_DATE)" { czo }

menuentry "" { czo }

menuentry "Czo-Rescue-Debian, zfs/toram/startx           (root/toor)" {
    echo "Czo-Rescue-Debian launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux  (\$root)/live/vmlinuz boot=live toram=filesystem.squashfs dostartx
    initrd (\$root)/live/initrd
}

menuentry "Czo-Rescue-Debian, zfs/toram/console/SERIAL   (root/toor)" {
    echo "Czo-Rescue-Debian launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux  (\$root)/live/vmlinuz boot=live toram=filesystem.squashfs console=ttyS0,115200n8
    initrd (\$root)/live/initrd
}

menuentry "Czo-Rescue-Debian, zfs/toram/console          (root/toor)" {
    echo "Czo-Rescue-Debian launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux  (\$root)/live/vmlinuz boot=live toram=filesystem.squashfs
    initrd (\$root)/live/initrd
}

menuentry "Czo-Rescue-Debian, zfs/startx                 (root/toor)" {
    echo "Czo-Rescue-Debian launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux  (\$root)/live/vmlinuz boot=live dostartx
    initrd (\$root)/live/initrd
}

menuentry "Czo-Rescue-Debian, zfs/console/SERIAL         (root/toor)" {
    echo "Czo-Rescue-Debian launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux  (\$root)/live/vmlinuz boot=live console=ttyS0,115200n8
    initrd (\$root)/live/initrd
}

menuentry "Czo-Rescue-Debian, zfs/console                (root/toor)" {
    echo "Czo-Rescue-Debian launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux  (\$root)/live/vmlinuz boot=live
    initrd (\$root)/live/initrd
}

menuentry "Czo-Rescue-Debian, failsafe                   (root/toor)" {
    echo "Czo-Rescue-Debian launch in progress, please stand by..."
    set GFXPAYLOAD=keep
    search --no-floppy --set=root --label RESCUE
    linux  (\$root)/live/vmlinuz boot=live memtest noapic noapm nodma nomce nolapic nomodeset nosmp nosplash
    initrd (\$root)/live/initrd
}

menuentry "Grml ISO Czo-Rescue-Debian, zfs/toram/startx RAM>3GB" {
        echo "ISO Czo-Rescue-Debian launch in progress, please stand by..."
	linux  /live/vmlinuz boot=live findiso=\${iso_path} toram=filesystem.squashfs dostartx
	initrd /live/initrd
}

menuentry "Grml ISO Czo-Rescue-Debian, zfs/console RAM>1GB" {
        echo "ISO Czo-Rescue-Debian launch in progress, please stand by..."
	linux  /live/vmlinuz boot=live findiso=\${iso_path}
	initrd /live/initrd
}

# menuentry "ISO Czo-Rescue-Debian $ISO_VERSION" {
#     echo "-> ISO Czo-Rescue-Debian launch in progress, please stand by..."
#     set iso_path="/boot/grml/czo-rescue-debian-$ISO_VERSION.iso"
#     search --no-floppy --set=root --file "\${iso_path}"
#     # support booting recent GRUB versions on UEFI systems
#     rmmod tpm
#     loopback loop "\${iso_path}"
#     linux (loop)/live/vmlinuz boot=live findiso="\${iso_path}" toram=filesystem.squashfs dostartx
#     initrd (loop)/live/initrd
# }

# menuentry "ISO Czo-Rescue-Debian $ISO_VERSION loopback" {
#     echo "-> ISO Czo-Rescue-Debian launch in progress, please stand by..."
#     set iso_path="/boot/grml/czo-rescue-debian-$ISO_VERSION.iso"
#     export iso_path
#     search --no-floppy --set=root --file "\${iso_path}"
#     # support booting recent GRUB versions on UEFI systems
#     rmmod tpm
#     loopback loop "\${iso_path}"
#     set root=(loop)
#     configfile /boot/grub/loopback.cfg
# }

# menuentry "PXE Czo-Rescue-Debian, zfs/startx" {
#     echo "Czo-Rescue-Debian launch in progress, please stand by..."
#     linux /boot/czo-rescue-debian/czo-rescue-debian-$ISO_VERSION/live/vmlinuz boot=live fetch=http://192.168.11.10/boot/czo-rescue-debian/czo-rescue-debian-$ISO_VERSION/live/filesystem.squashfs dostartx
#     initrd /boot/czo-rescue-debian/czo-rescue-debian-$ISO_VERSION/live/initrd
# }

menuentry "Run Memtest86+" {
    echo "Memtest86+ launch in progress, please stand by..."
    search --no-floppy --set=root --label RESCUE
    linux (\$root)/live/memtest.efi keyboard=both
}

menuentry "Start EFI Shell" {
    terminal_output console
    search --no-floppy --set=root --label RESCUE
    chainloader (\$root)/EFI/shell.efi
}

menuentry "EFI Firmware setup" {
    fwsetup
}

menuentry "Reboot" {
    reboot
}

menuentry "Power Off" {
    halt
}

HEREDOC

##================================================================
echo " -> loopback.cfg"

cat <<HEREDOC > $LIVE_BOOT/staging/boot/grub/loopback.cfg
source /boot/grub/grub.cfg
HEREDOC


##================================================================
echo " -> Prepare Boot Loader Files"

cp $LIVE_BOOT/staging/boot/grub/grub.cfg $LIVE_BOOT/staging/EFI/BOOT/

cat <<'HEREDOC' > $LIVE_BOOT/tmp/grub-embed.cfg
if ! [ -d "$cmdpath" ]; then
    # On some firmware, GRUB has a wrong cmdpath when booted from an optical disc.
    # https://gitlab.archlinux.org/archlinux/archiso/-/issues/183
    if regexp --set=1:isodevice '^(\([^)]+\))\/?[Ee][Ff][Ii]\/[Bb][Oo][Oo][Tt]\/?$' "$cmdpath"; then
        cmdpath="${isodevice}/EFI/BOOT"
    fi
fi
configfile "${cmdpath}/grub.cfg"
HEREDOC

if [ $ARCH = "amd64" ]; then
    cp -f $LIVE_BOOT/chroot/boot/vmlinuz-*-amd64 $LIVE_BOOT/staging/live/vmlinuz
    cp -f $LIVE_BOOT/chroot/boot/initrd.img-*-amd64 $LIVE_BOOT/staging/live/initrd
else
    cp -f $LIVE_BOOT/chroot/boot/vmlinuz-*-pae $LIVE_BOOT/staging/live/vmlinuz
    cp -f $LIVE_BOOT/chroot/boot/initrd.img-*-pae $LIVE_BOOT/staging/live/initrd
fi

cp -f $LIVE_BOOT/chroot/boot/memtest.bin $LIVE_BOOT/staging/live/memtest.bin
cp -f $LIVE_BOOT/chroot/boot/memtest.efi $LIVE_BOOT/staging/live/memtest.efi

#hdt
RELEASE="$(<$LIVE_BOOT/chroot/tmp/release)"
gzip -c -9 $LIVE_BOOT/chroot/usr/share/misc/pci.ids > $LIVE_BOOT/staging/isolinux/hdt/pciids.gz
gzip -c -9 $LIVE_BOOT/chroot/usr/lib/modules/$RELEASE/modules.alias > $LIVE_BOOT/staging/isolinux/hdt/modalias.gz

cp -f /usr/lib/ISOLINUX/isolinux.bin $LIVE_BOOT/staging/isolinux/isolinux.bin
cp -f /usr/lib/ISOLINUX/isohdpfx.bin $LIVE_BOOT/staging/isolinux/isohdpfx.bin
cp -f /usr/lib/syslinux/modules/bios/* $LIVE_BOOT/staging/isolinux/

cp -r /usr/lib/grub/x86_64-efi/* $LIVE_BOOT/staging/boot/grub/x86_64-efi/
rm -fr $LIVE_BOOT/staging/boot/grub/x86_64-efi/monolithic

cp -f $LIVE_BOOT/chroot/boot/shell.efi $LIVE_BOOT/staging/EFI

grub-mkstandalone --compress xz -O i386-efi \
    --modules="part_gpt part_msdos fat iso9660" \
    --locales="" --themes="" --fonts="" \
    --output="$LIVE_BOOT/staging/EFI/BOOT/BOOTIA32.EFI" \
    "boot/grub/grub.cfg=$LIVE_BOOT/tmp/grub-embed.cfg"

grub-mkstandalone --compress xz -O x86_64-efi \
    --modules="part_gpt part_msdos fat iso9660" \
    --locales="" --themes="" --fonts="" \
    --output="$LIVE_BOOT/staging/EFI/BOOT/BOOTx64.EFI" \
    "boot/grub/grub.cfg=$LIVE_BOOT/tmp/grub-embed.cfg"

rm -f $LIVE_BOOT/staging/EFI/debianiso/efiboot.img
mkfs.fat -C $LIVE_BOOT/staging/EFI/debianiso/efiboot.img 2880
mmd -i $LIVE_BOOT/staging/EFI/debianiso/efiboot.img ::/EFI ::/EFI/BOOT
mcopy -vi $LIVE_BOOT/staging/EFI/debianiso/efiboot.img \
    $LIVE_BOOT/staging/EFI/BOOT/BOOTIA32.EFI \
    $LIVE_BOOT/staging/EFI/BOOT/BOOTx64.EFI \
    $LIVE_BOOT/staging/boot/grub/grub.cfg \
    ::/EFI/BOOT/

}


##================================================================
## Create Bootable ISO

make_06_iso() {

rm -f $LIVE_BOOT/$ISO_NAME
(
cd $LIVE_BOOT/staging
xorriso \
    -as mkisofs \
    -iso-level 3 \
    -full-iso9660-filenames \
    -volid RESCUE \
    -publisher "$ISO_PUBLISHER" \
    -appid "$ISO_APPLICATION" \
    -isohybrid-mbr isolinux/isohdpfx.bin \
    -eltorito-boot isolinux/isolinux.bin \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        -eltorito-catalog isolinux/boot.cat \
    -eltorito-alt-boot \
        -e EFI/debianiso/efiboot.img \
        -no-emul-boot \
        -isohybrid-gpt-basdat \
    -o $LIVE_BOOT/$ISO_NAME .
)

    # ?? --mbr-force-bootable -partition_offset 16 \
    # -joliet -joliet-long \

    # -e --interval:appended_partition_2:all:: \
    # -append_partition 2 C12A7328-F81F-11D2-BA4B-00A0C93EC93B $LIVE_BOOT/staging/EFI/debianiso/efiboot.img \

    # -rational-rock: dir and file are not r/w...

(
    cd $LIVE_BOOT
    implantisomd5 $ISO_NAME
    sha512sum $ISO_NAME > $ISO_NAME.sha512
    echo
    ls -alh $ISO_NAME
)

cp -f $LIVE_BOOT/build-czo-rescue.log $SCRIPT_PATH

}

##================================================================
## main

# no log
run_once make_00_prepare

(
run_once make_01_debootstrap
run_once make_02_chroot
run_once make_03_copyfiles
run_once make_04_squashfs
run_once make_05_bootloader
run_once make_06_iso
) 2>&1 | tee -a $LOG

echo
if [ -n "$RTMStart" ] ; then RTMStop=$(date +%s); perl -e '$sec=$ARGV[0]-$ARGV[1]; print "Execution time: " . int($sec/60) ."min ". $sec%60 ."sec\n"' $RTMStop $RTMStart; RTMStart=$RTMStop ; fi

#== END ==================================================

